#!/usr/bin/bash

# Rachael Ballentine
o# CEG2350 Lab04, 9/27/24


# -------- FUNCTIONS --------
# this function checks to see how many command line args were given and prompts for input if there weren't 2
# for this function to work, it has to be passed all command line args (#@)
promptForDescription() {
	# check if there are 2 command line args
	if [[ $# -lt 2 ]]; then
        	read -p "Please provide a task description: " description
        else
        	description=$2
        fi
}

# user-guide function outputs the user guide using echo and printf.
# printf is used for the actions for prettier formatting. a field width of 10 characters was used, since 
# the largest word is complete
user-guide() {
	echo "---------------------- TASK TRACKER USER GUIDE -----------------------"
	echo "NAME"
	echo -e "\ttt - is a task tracker capable of adding, completing, clearing, and keeping track of a list of tasks"
	echo "USAGE"
	echo -e "\tbash tt [ACTION] [TASK DESCRIPTION]"
	echo -e "\tAn action must be given for the script to run."
	echo ""
	echo "AVAILABLE ACTIONS"
	printf "\t%-10s %s \n" "add" "add a new task to the task list"
	printf "\t%-10s %s \n" "complete" "mark a task as complete and remove from task list"
	printf "\t%-10s %s \n" "view" "print all tasks on the task list"
	printf "\t%-10s %s \n" "clear" "remove all tasks from task list (delete list)"
	printf "\t%-10s %s \n" "help" "print the file user guide"
	echo ""
	echo "AUTHOR"
	echo -e "\tWritten by Rachael Ballentine."
}


# --------- MAIN CODE --------
# checking for arguments: if no command line args given, exit. 
if [[ $# == 0 ]]; then
	echo -e "No arguments detected. Please try again. \n"
	user-guide
	exit
fi

# if there was at least one arg, assign it to action and create the task file
action=$1
touch "$HOME/.tasks"

# case statement to determine what function was entered as input
case $action in
	add)
		# if no task description was given as second arg, prompt for one and read in
		promptForDescription "$@"

		# append the given task description to the task list and tell user it was added
		echo "- $description" >> "$HOME/.tasks"
		echo "task '$description' was added to task list."
		;;
	complete)
		# if not task description given, prompt for one
		promptForDescription "$@"

		# use grep to search for the task: -q means grep doesn't print matches to output. using grep for this 
		# since it gives an exit code based on whether it found the search term or not
		grep -q "$description" "$HOME/.tasks"

		# result of last executed command is in #?. since grep was just run, its exit code (whether it was successful 
		# or not) will be in #?. if it found the search term, it will return 0. if it didn't, it will return 1
		if [[ $? == 1 ]]; then 
			echo "Task not found."
			exit 
		fi 
		
		# if the task was found, use sed to delete it permanently with -i and d
		sed -i "/$description/d" $HOME/.tasks
		echo "task '$description' marked as completed and removed from task list."
		;;
	view)
		echo "All current tasks:"
		cat "$HOME/.tasks"
		;;
	clear) 
		read -p "Do you really want to clear your task list? Did you actually do everything... [Y/N]: " hmm
		if [[ $hmm == "N" ]]; then 
			echo "Yeah didn't think so"
			exit
		fi

		rm $HOME/.tasks
		echo "All tasks removed."
		;;
	help)
		user-guide
		;;
	*) 
		echo "Invalid argument given"
		exit
		;;
	esac 


